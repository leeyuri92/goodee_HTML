<div class="row my-5">
  <div class="col">
      <h1 class="text-center mb-5">글수정</h1>
      <form name="frm" method="post">
          <input class="form-control my-2" name="title" placeholder="제목을 입력하세요.">
          <textarea class="form-control" name="body" rows="10" placeholder="내용을 입력하세요."></textarea>
          <div class="text-center my-2">
              <button class="btn btn-primary">글수정</button>
              <button class="btn btn-secondary" type="reset">수정취소</button>
          </div>
      </form>
  </div>
</div>

<!-- 외부에서 제공되는 라이브러리 사용 -->
<!-- 
  CRUD 패턴화
  입력 : 새로쓰기 > UI > 입력받고 > 저장버튼(DB연동 - await addDoc) > 목록페이지 이동
  수정 : 있는걸 바꿈 > DB경유 > UI출력 > 수정할 내용 작성 > 저장버튼(DB연동 - setDoc) > 목록페이지 이동
  -> 추가로 생각해볼 문제 : 내가 어디서왓지? > 관리함 > 이전버튼을 눌렀을 때 내가 있던곳으로 간다.
  삭제 : 있는걸 삭제 > 비번이 있다 없다에 따라서 로직이 달라진다.
  조회 : 있는 거 꺼내옴
 -->
<script src="https://cdn.jsdelivr.net/npm/moment@2.29.4/moment.min.js"></script>
<script type="module">
  import {app} from "/javascripts/firebase.js";
  import{
    getFirestore,
    doc,
    getDoc,
    setDoc,
    addDoc
  } from "https://www.gstatic.com/firebasejs/9.22.1/firebase-firestore.js";
  const db = getFirestore(app);

  // 사용자가 선택한 id번호를 가져온다.
  const id = "<%=id%>"; // 반드시 쿼테이션을 붙여야 값으로 취급된. 안붙이면 변수 취급당함
  console.log(id);
  let row = null;
  getRow();
  async function getRow(){
    // 데이터를 이미지화 해서 읽고 쓴다 - firebase database
    const snapshot = await getDoc(doc(db,`board/${id}`))
    row = snapshot.data();
    console.log(row);
    // 화면에 그려진 위치에 추가됨
    // <form name = frm><input type = 'text'name = 'title or body'>
    // 화면에 디비에서 꺼내온 값을 초기화해줌
    $(frm.title).val(row.title);
    $(frm.body).val(row.body);

  }
  $(frm).on("submit",async (event) => {
    // submit이슈로 인해 새로고침 사이드이펙트 방지 
    event.preventDefault();
    $("#modal-confirm .modal-body").html("수정된 정보를 저장하시겠습니까?");
    $("#modal-confirm").modal("show");
    // 모달창에서 예(btn-primary)버튼을 눌렀을 때 이벤트 감지되고 실행문 징행되는 거니까
    // 외부에서 호출되는 함수가 아니니까 또 다른게는 onclick이벤트 핸들러와 콜백함수라서
    // 내부에서 호출되고 끝나는 거니까 호이스팅 함수일 필요가 업다
    let title = $(frm.title).val(); // 사용자가 입력한 제목
    let body = $(frm.body).val();
    $("#modal-confirm").on("click","btn-primary",async () => {
      await setDoc(doc(db,`board/${id}`),{
        ...row, title, body
      });
      // 성공하면 목록페이지로 간다
      location.href = "/board";
    })// 모달창에서 예 버튼 눌렀을 때 이벤트 처리하기
    $(frm).on("reset",(e) => {
      e.preventDefault();
      getRow();
    });


    
    
  //   // 유효성 검사 추가
  //   if(title ==""||body==""){
  //     $("#modal-alert .modal-body").html("제목 또는 내용을 입력하세요.");
  //     $("#modal-alert").modal("show");
  //   }
  //   // 제목과 내용을 모두 작성 햇을 때
  //   else{
  //     let email = localStorage.getItem("email"); // email로그인 성공 후 로컬스토리지에 저장된 정보를 작성자로 설정
  //     let date = moment(new Date()).format("YYYY-MM-DD HH:mm:ss");
  //     console.log(`${title},${body},${email},${date}`);      
  //     // collection 값을 폴더명으로 생각함
  //     await addDoc(collection(db,"board"),{  // posts 자리에 board가 생성됨
  //       email:email,
  //       title:title,
  //       body:body,
  //       date:date
  //     });
  //     location.href="/board";
  //   }
   })
</script>