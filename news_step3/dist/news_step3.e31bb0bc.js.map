{"version":3,"sources":["index.js"],"names":["ajax","XMLHttpRequest","TITLE_URL","container","document","getElementById","content","createElement","CONTENT_URL","getData","url","open","send","JSON","parse","response","newsList","console","log","ul","window","addEventListener","id","location","hash","substring","ncontent","replace","title","innerHTML","appendChild","i","div","concat","comments_count","firstElementChild"],"mappings":"AAAA,IAAMA,IAAI,GAAG,IAAIC,cAAc,CAAC,CAAC,CAAC,CAAC;AACnC,IAAMC,SAAS,GAAG,sCAAsC;AACxD,IAAMC,SAAS,GAAGC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC;;AAEjD;AACA,IAAMC,OAAO,GAAGF,QAAQ,CAACG,aAAa,CAAC,KAAK,CAAC;AAC7C,IAAMC,WAAW,GAAG,wCAAwC;;AAE5D;AACA;;AAEAC,OAAO,GAAG,SAAAA,QAACC,GAAG,EAAK;EACjBV,IAAI,CAACW,IAAI,CAAC,KAAK,EAAED,GAAG,EAAE,KAAK,CAAC;EAC5BV,IAAI,CAACY,IAAI,CAAC,CAAC,CAAC,CAAC;EACb,OAAOC,IAAI,CAACC,KAAK,CAACd,IAAI,CAACe,QAAQ,CAAC;AAClC,CAAC;AACD,IAAMC,QAAQ,GAAGP,OAAO,CAACP,SAAS,CAAC;;AAEnC;AACA;AACA;;AAEAe,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC,CAAC,CAAC;;AAEvB,IAAMG,EAAE,GAAGf,QAAQ,CAACG,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;;AAEzC;AACAa,MAAM,CAACC,gBAAgB,CAAC,YAAY,EAAE,YAAM;EAC1CJ,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;EACzB,IAAMI,EAAE,GAAGC,QAAQ,CAACC,IAAI,CAACC,SAAS,CAAC,CAAC,CAAC;EAErC,IAAMC,QAAQ,GAAGjB,OAAO,CAACD,WAAW,CAACmB,OAAO,CAAC,KAAK,EAAEL,EAAE,CAAC,CAAC;EACxD,IAAMM,KAAK,GAAGxB,QAAQ,CAACG,aAAa,CAAC,IAAI,CAAC;EAC1CqB,KAAK,CAACC,SAAS,GAAGH,QAAQ,CAACE,KAAK;EAChCtB,OAAO,CAACwB,WAAW,CAACF,KAAK,CAAC,CAAC,CAAE;AAC/B,CAAC,CAAC;;AAEF,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;EAC1B,IAAMC,GAAG,GAAG5B,QAAQ,CAACG,aAAa,CAAC,KAAK,CAAC;EACzCyB,GAAG,CAACH,SAAS,iCAAAI,MAAA,CAECjB,QAAQ,CAACe,CAAC,CAAC,CAACT,EAAE,iBAAAW,MAAA,CACtBjB,QAAQ,CAACe,CAAC,CAAC,CAACH,KAAK,mBAAAK,MAAA,CAAMjB,QAAQ,CAACe,CAAC,CAAC,CAACG,cAAc,2BAGxD;EACCf,EAAE,CAACW,WAAW,CAACE,GAAG,CAACG,iBAAiB,CAAC;AACvC;AACA;AACAhC,SAAS,CAAC2B,WAAW,CAACX,EAAE,CAAC;AACzBhB,SAAS,CAAC2B,WAAW,CAACxB,OAAO,CAAC","file":"news_step3.e31bb0bc.js","sourceRoot":"..","sourcesContent":["const ajax = new XMLHttpRequest(); // 브라우저가 비동기처리를 위해 제공하는 내장객체임\r\nconst TITLE_URL = 'https://api.hnpwa.com/v0/news/1.json';\r\nconst container = document.getElementById('root');\r\n\r\n// 뉴스 comment를 담을 태그 생성\r\nconst content = document.createElement('div');\r\nconst CONTENT_URL = 'https://api.hnpwa.com/v0/item/@id.json';\r\n\r\n// @param : url - TITLE_URL or CONTENT_URL\r\n// @return : Array(JSON->application/json -vkdlTjs, c#,spring 사용자들과의 호환)\r\n\r\ngetData = (url) => {\r\n  ajax.open('GET', url, false);\r\n  ajax.send(); //send()호출될 때 비로서 서버측에 요청이 일어남\r\n  return JSON.parse(ajax.response);\r\n};\r\nconst newsList = getData(TITLE_URL);\r\n\r\n// open은 XMLHttpRequest 객체가 제공하는 함수로 파라미터는 3개가 필요함\r\n// 1.전송방식 2. 요청하는 URL, 3. true:동기, false:비동기 처리로 요청해줌\r\n// ajax변수는 XMLHttpRequest를 참조하는 변수명임\r\n\r\nconsole.log(newsList); // 서버측에서 보낸 응답 출력해보기 - Array로 변화 출력\r\n\r\nconst ul = document.createElement('ul'); // <ul>이 만들어 진다. DOM API 가지고 태그를 만드니까 직관적이지 않다. DOM Tree 그려지지 않아서\r\n\r\n// 해시값이 변경될 때 - 인터셉터 - @id -> Array에 담긴 id값 38012345을 변경한다.\r\nwindow.addEventListener('hashchange', () => {\r\n  console.log('해시가 변경되었다.');\r\n  const id = location.hash.substring(1);\r\n\r\n  const ncontent = getData(CONTENT_URL.replace('@id', id));\r\n  const title = document.createElement('h1');\r\n  title.innerHTML = ncontent.title;\r\n  content.appendChild(title);  // <div><h1></h1></div>\r\n});\r\n\r\nfor (let i = 0; i < 5; i++) {\r\n  const div = document.createElement('div');\r\n  div.innerHTML = `  \r\n  <li>\r\n    <a href=\"#${newsList[i].id}\">\r\n      ${newsList[i].title}(❤️${newsList[i].comments_count})\r\n    </a>\r\n  </li>\r\n`;\r\n  ul.appendChild(div.firstElementChild);\r\n}\r\n// 기존에 태그에 하위태그로 추가하는 함수\r\ncontainer.appendChild(ul);\r\ncontainer.appendChild(content);\r\n"]}